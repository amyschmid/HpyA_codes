---
title: "2020Combined_hpyAsalt_SS6"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#Load libraries
```{r load_libraries,warning=FALSE,message=FALSE}

rm(list = ls())  # Remove all the previous definitions 

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(DESeq2))
suppressPackageStartupMessages(library(apeglm))
suppressPackageStartupMessages(library(regionReport))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(pheatmap))
suppressPackageStartupMessages(library(dendextend))
suppressPackageStartupMessages(library(rrcov))
```

### Load count and meta files, define DESeq formula for diff expr analysis
```{r load_initialise_data,warning=FALSE}

#Load the data and meta files
mycount <- as.matrix(read.csv("combineddata4.csv", row.names=1))
metafile <- read.csv("combinedmeta4.csv", row.names=1) 

# Create a DESeqDataSet object, providing the formula for comparisons
dds.mydata <- DESeqDataSetFromMatrix(mycount,metafile,~Batch+Salt+Genotype+Salt:Genotype)  
#Salt:Genotype means the combination effect of salt and hpyA KO on gene expression; batch is added since rRNA removal and sequencing was done at 2 different times.

# Assign baselines for the comparisons
dds.mydata$Salt <- relevel(dds.mydata$Salt, ref = "optimal")
dds.mydata$Genotype <- relevel(dds.mydata$Genotype, ref = "WT")

# Estimate Size Factors to inspect the raw count data which is generated from various lanes and bio reps. 
dds.mydata <- estimateSizeFactors(dds.mydata)
sizeFactors(dds.mydata)
mydf <- sizeFactors(dds.mydata) %>%
  as.data.frame %>%
  rownames_to_column
colnames(mydf)[2] <- "sizefac"
ggplot(mydf, aes(rowname, sizefac)) + geom_point() + theme(axis.text.x = element_text(face="bold", color="blue", angle=45))

#There is a clear difference in size factors in the 2 batches, however, this will be corrected for by the DESeq2 formula, which uses counts normalised for size factor and for which the formula includes a batch term.
```

```{r export_normalised,warning=FALSE}
# Convert the raw count to the normalized count
normalized_counts <- counts(dds.mydata, normalized=TRUE)
write.csv(normalized_counts, file="normalised_counts.csv")
```

### Differential Expression Analysis
```{r diffexpr_QC,warning=FALSE}

ddsDE <- suppressMessages(DESeq(dds.mydata))

#Estmate of sample quality; a plot of per-gene dispersion estimates together with the fitted mean-dispersion relationship
plotDispEsts(ddsDE)

# Total number of raw counts per sample
colSums(counts(ddsDE)) %>%
  as.data.frame %>%
  rownames_to_column -> mydf.raw.count

colnames(mydf.raw.count)[2] <- "whole.gene.count"

#Normalising counts by size factor
colSums(counts(ddsDE, normalized = T))  %>%
  as.data.frame %>%
  rownames_to_column -> mydf.norm.count

colnames(mydf.norm.count)[2] <- "whole.gene.norm.count"
#mydf.norm.count

ggplot(mydf.norm.count, aes(rowname, whole.gene.norm.count)) + geom_point() + theme(axis.text.x = element_text(face="bold", color="blue", angle=45))
#Normalisation has taken care of the size factor disparity from the different batches, which was originally spanned 2 orders of magnitude.
```

### Clustering: variance stabilizing transformation and batch-effect correction
```{r clustering, warning=FALSE}
# The variance stabilizing transformation is obtained using the vst() function. This batch-corrected data is used only for visualisation (PCA plots and heatmaps), not for differnetial expression analysis. For DE, Batch is included as a term in the forumla above, and is subsequently not included in the contrast provided for the results function below, which is sufficient for batch correction in DESeq2.

vsd=vst(ddsDE)
#rld <- tryCatch(rlog(ddsDE), error = function(e) { rlog(ddsDE, fitType = 'mean') })
assay(vsd)=limma::removeBatchEffect(assay(vsd),vsd$Batch)

sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
#rownames(sampleDistMatrix) <- paste(rld$Genotype, rld$Salt, sep="-")
colnames(sampleDistMatrix) <- paste(vsd$Genotype, vsd$Salt, sep="-")
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
#Heatmap
pheatmap(sampleDistMatrix,clustering_distance_rows=sampleDists,clustering_distance_cols=sampleDists,col=colors)

#Principal Components Analysis
plotPCA(vsd, intgroup = c("Genotype", "Salt"))
#Clearly, the 2 PCs correspond to the effect of salt and the effect of hpyA KO respectively.

#Robust PCA for outlier detection
plot(PcaGrid(sampleDistMatrix,k=2))
```

### The effect of Salt on the Genotype effect (combinatorial differential expression)
```{r combinatorial_result, warning=FALSE}
Res_Lowsalt_GenotypeKO <- results(ddsDE, contrast=list("Saltlow.GenotypeKO"))    
table_Lowsalt_GenotypeKO <- Res_Lowsalt_GenotypeKO %>%     # Make a result table
  data.frame() %>%
  rownames_to_column(var="Locus") %>%
  as_tibble()

#Sort by p-value
table_Lowsalt_GenotypeKO <- table_Lowsalt_GenotypeKO[order(table_Lowsalt_GenotypeKO$padj),]

# Apply significance threshold, view and export table
table_Lowsalt_GenotypeKO_sig <- table_Lowsalt_GenotypeKO %>%
  filter(padj < 0.05)
write.csv(table_Lowsalt_GenotypeKO_sig, file="Combinatorial_sigresults.csv")
table_Lowsalt_GenotypeKO_sig
```

### Volcano and MA plot
```{r combinatorial_QC, warning=FALSE}
Lowsalt_GenotypeKO.vol.plot <- table_Lowsalt_GenotypeKO %>% 
  mutate(threshold_sig = padj < 0.05)

ggplot(Lowsalt_GenotypeKO.vol.plot) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) + ggtitle("Combined effect of hpyA KO and low salt") +xlab("log2 fold change") + ylab("-log10 adjusted p-value") +xlim(c(-3,3))+ylim(c(0,4))+ theme(legend.position = "none", plot.title = element_text(size = rel(1.5), hjust = 0.5), axis.title = element_text(size = rel(1.25)))
  
plotMA(Res_Lowsalt_GenotypeKO,colNonSig="grey",colSig="red",colLine="black")
```

### The effect of hpyA KO in standard conditions
```{r hpyAKOinoptimalsalt, warning=FALSE}
#Steps here follow the same logic as those above, except that the comparison is for the effect of genotype alone (rather than condition*gentoype interaction) in a given media condition (optimal salt).

#Get data only from samples in optimal salt conditions
optimalindex=which(metafile$Salt=="optimal")
optimalonlymeta=metafile[optimalindex,]
optimaldata=mycount[,optimalindex]

#Create DDS objects to measure the effect of genotype (WT vs hpyA KO)
dds.optimalonly=DESeqDataSetFromMatrix(optimaldata,optimalonlymeta,~Batch+Genotype)
#Set baseline for comparison
dds.optimalonly$Genotype <- relevel(dds.optimalonly$Genotype, ref = "WT")
#Differential expression analysis
DE.optimalonly=suppressMessages(DESeq(dds.optimalonly))
#Dispersion plot as a quality check
plotDispEsts(DE.optimalonly)
#PCA check of batch-corrected data
vsd.optimalonly=vst(DE.optimalonly)
#rld.optimalonly <- tryCatch(rlog(DE.optimalonly), error = function(e) { rlog(DE.optimalonly, fitType = 'mean') })
assay(vsd.optimalonly)=limma::removeBatchEffect(assay(vsd.optimalonly),vsd.optimalonly$Batch)
sampleDists.optimalonly <- dist(t(assay(vsd.optimalonly)))
sampleDistMatrix.optimalonly <- as.matrix(sampleDists.optimalonly)
rownames(sampleDistMatrix.optimalonly) <- paste(vsd.optimalonly$Genotype, vsd.optimalonly$Salt, sep="-")
colnames(sampleDistMatrix.optimalonly) <- paste(vsd.optimalonly$Genotype, vsd.optimalonly$Salt, sep="-")
pheatmap(sampleDistMatrix.optimalonly,clustering_distance_rows=sampleDists.optimalonly,clustering_distance_cols=sampleDists.optimalonly,col=colors)
plotPCA(vsd.optimalonly, intgroup ="Genotype")
#Getting diff expression results
Res_genotypeinoptimal=results(DE.optimalonly,contrast=c("Genotype","KO","WT"))
#Tabulting diff. expressed genes
table_genotypeinoptimal <- Res_genotypeinoptimal %>%     # Make a result table
  data.frame() %>%
  rownames_to_column(var="Locus") %>%
  as_tibble()
#Sort by p-value
table_genotypeinoptimal <- table_genotypeinoptimal[order(table_genotypeinoptimal$padj),]
# Apply significance threshold, view and export table
table_genotypeinoptimal_sig <- table_genotypeinoptimal %>%
  filter(padj < 0.05)
write.csv(table_genotypeinoptimal_sig, file="Optimalonly_KOeffect_sigresults.csv")
table_genotypeinoptimal_sig
#Volcano plot
Optimalonly.genotypeeffect.vol.plot <- table_genotypeinoptimal %>% 
  mutate(threshold_sig = padj < 0.05)
ggplot(Optimalonly.genotypeeffect.vol.plot) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) + ggtitle("Effect of hpyA KO in optimal conditions") +xlab("log2 fold change") + ylab("-log10 adjusted p-value") +xlim(c(-3,3))+ylim(c(0,10))+ theme(legend.position = "none", plot.title = element_text(size = rel(1.5), hjust = 0.5), axis.title = element_text(size = rel(1.25)))
#MA plot
plotMA(Res_genotypeinoptimal,colNonSig="grey",colSig="red",colLine="black")
```

### The effect of hpyA KO in low-salt conditions
```{r hpyAKOinlowsalt, warning=FALSE}
#Steps here follow the same logic as those above, except that the comparison is for the effect of genotype alone (rather than condition*gentoype interaction) in a given media condition (low salt).

#Get data only from samples in low salt conditions
lowindex=which(metafile$Salt=="low")
lowonlymeta=metafile[lowindex,]
lowdata=mycount[,lowindex]

#Create DDS objects to measure the effect of genotype (WT vs hpyA KO)
dds.lowonly=DESeqDataSetFromMatrix(lowdata,lowonlymeta,~Batch+Genotype)
#Set baseline for comparison
dds.lowonly$Genotype <- relevel(dds.lowonly$Genotype, ref = "WT")
#Differential expression analysis
DE.lowonly=suppressMessages(DESeq(dds.lowonly))
#Dispersion plot as a quality check
plotDispEsts(DE.lowonly)
#PCA check of batch-corrected data
vsd.lowonly=vst(DE.lowonly)
#rld.lowonly <- tryCatch(rlog(DE.lowonly), error = function(e) { rlog(DE.lowonly, fitType = 'mean') })
assay(vsd.lowonly)=limma::removeBatchEffect(assay(vsd.lowonly),vsd.lowonly$Batch)
sampleDists.lowonly <- dist(t(assay(vsd.lowonly)))
sampleDistMatrix.lowonly <- as.matrix(sampleDists.lowonly)
rownames(sampleDistMatrix.lowonly) <- paste(vsd.lowonly$Genotype, vsd.lowonly$Salt, sep="-")
colnames(sampleDistMatrix.lowonly) <- paste(vsd.lowonly$Genotype, vsd.lowonly$Salt, sep="-")
pheatmap(sampleDistMatrix.lowonly,clustering_distance_rows=sampleDists.lowonly,clustering_distance_cols=sampleDists.lowonly,col=colors)
plotPCA(vsd.lowonly, intgroup ="Genotype")
#Getting diff expression results
Res_genotypeinlow=results(DE.lowonly,contrast=c("Genotype","KO","WT"))
#Tabulting diff. expressed genes
table_genotypeinlow <- Res_genotypeinlow %>%     # Make a result table
  data.frame() %>%
  rownames_to_column(var="Locus") %>%
  as_tibble()
#Sort by p-value
table_genotypeinlow <- table_genotypeinlow[order(table_genotypeinlow$padj),]
# Apply significance threshold, view and export table
table_genotypeinlow_sig <- table_genotypeinlow %>%
  filter(padj < 0.05)
write.csv(table_genotypeinlow_sig, file="Lowsalt_KOeffect_sigresults.csv")
table_genotypeinlow_sig
#Volcano plot
Lowonly.genotypeeffect.vol.plot <- table_genotypeinlow %>% 
  mutate(threshold_sig = padj < 0.05)
ggplot(Lowonly.genotypeeffect.vol.plot) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) + ggtitle("Effect of hpyA KO in low salt conditions") +xlab("log2 fold change") + ylab("-log10 adjusted p-value") +xlim(c(-5,5))+ylim(c(0,4))+ theme(legend.position = "none", plot.title = element_text(size = rel(1.5), hjust = 0.5), axis.title = element_text(size = rel(1.25)))
#MA plot
plotMA(Res_genotypeinlow,colNonSig="grey",colSig="red",colLine="black")
```

### The effect of low salt on Hbt salinarum
```{r lowsaltinWT, warning=FALSE}
#Steps here follow the same logic as those above, except that the comparison is for the effect of condition alone (rather than condition*gentoype interaction or genotype) in a given genotype (WT).

#Get data only from WT samples
saltindex=which(metafile$Genotype=="WT")
saltonlymeta=metafile[saltindex,]
saltdata=mycount[,saltindex]

#Create DDS objects to measure the effect of condition (Optimal vs Low salt in WT)
dds.saltonly=DESeqDataSetFromMatrix(saltdata,saltonlymeta,~Batch+Salt)
#Set baseline for comparison
dds.saltonly$Genotype <- relevel(dds.saltonly$Salt, ref = "optimal")
#Differential expression analysis
DE.saltonly=suppressMessages(DESeq(dds.saltonly))
#Dispersion plot as a quality check
plotDispEsts(DE.saltonly)
#PCA check of batch-corrected data
vsd.saltonly=vst(DE.saltonly)
#rld.saltonly <- tryCatch(rlog(DE.lowonly), error = function(e) { rlog(DE.lowonly, fitType = 'mean') })
assay(vsd.saltonly)=limma::removeBatchEffect(assay(vsd.saltonly),vsd.saltonly$Batch)
sampleDists.saltonly <- dist(t(assay(vsd.saltonly)))
sampleDistMatrix.saltonly <- as.matrix(sampleDists.saltonly)
rownames(sampleDistMatrix.saltonly) <- paste(vsd.saltonly$Genotype, vsd.saltonly$Salt, sep="-")
colnames(sampleDistMatrix.saltonly) <- paste(vsd.saltonly$Genotype, vsd.saltonly$Salt, sep="-")
pheatmap(sampleDistMatrix.saltonly,clustering_distance_rows=sampleDists.saltonly,clustering_distance_cols=sampleDists.saltonly,col=colors)
plotPCA(vsd.saltonly, intgroup ="Salt")
#Getting diff expression results
Res_saltinWT=results(DE.saltonly,contrast=c("Salt","low","optimal"))
#Tabulting diff. expressed genes
table_saltinWT <- Res_saltinWT %>%     # Make a result table
  data.frame() %>%
  rownames_to_column(var="Locus") %>%
  as_tibble()
#Sort by p-value
table_saltinWT <- table_saltinWT[order(table_saltinWT$padj),]
# Apply significance threshold, view and export table
table_saltinWT_sig <- table_saltinWT %>%
  filter(padj < 0.05)
write.csv(table_saltinWT_sig, file="WT_salteffect_sigresults.csv")
table_saltinWT_sig
#Volcano plot
WTonly.salteffect.vol.plot <- table_saltinWT %>% 
  mutate(threshold_sig = padj < 0.05)
ggplot(WTonly.salteffect.vol.plot) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) + ggtitle("Effect of low salt on WT cells") +xlab("log2 fold change") + ylab("-log10 adjusted p-value") +xlim(c(-5,5))+ylim(c(0,4))+ theme(legend.position = "none", plot.title = element_text(size = rel(1.5), hjust = 0.5), axis.title = element_text(size = rel(1.25)))
#MA plot
plotMA(Res_saltinWT,colNonSig="grey",colSig="red",colLine="black")
```
### The effect of low salt on Hbt sal in the hpyA KO genotype
```{r lowsaltinKO, warning=FALSE}
#Steps here follow the same logic as those above, except that the comparison is for the effect of condition alone (rather than condition*gentoype interaction or genotype) in a given genotype (WT).

#Get data only from WT samples
KOsaltindex=which(metafile$Genotype=="KO")
KOsaltonlymeta=metafile[KOsaltindex,]
KOsaltdata=mycount[,KOsaltindex]

#Create DDS objects to measure the effect of condition (Optimal vs Low salt in WT)
dds.KOsaltonly=DESeqDataSetFromMatrix(KOsaltdata,KOsaltonlymeta,~Batch+Salt)
#Set baseline for comparison
dds.KOsaltonly$Genotype <- relevel(dds.KOsaltonly$Salt, ref = "optimal")
#Differential expression analysis
DE.KOsaltonly=suppressMessages(DESeq(dds.KOsaltonly))
#Dispersion plot as a quality check
plotDispEsts(DE.KOsaltonly)
#PCA check of batch-corrected data
vsd.KOsaltonly=vst(DE.KOsaltonly)
#rld.saltonly <- tryCatch(rlog(DE.lowonly), error = function(e) { rlog(DE.lowonly, fitType = 'mean') })
assay(vsd.KOsaltonly)=limma::removeBatchEffect(assay(vsd.KOsaltonly),vsd.KOsaltonly$Batch)
sampleDists.KOsaltonly <- dist(t(assay(vsd.KOsaltonly)))
sampleDistMatrix.KOsaltonly <- as.matrix(sampleDists.KOsaltonly)
rownames(sampleDistMatrix.KOsaltonly) <- paste(vsd.KOsaltonly$Genotype, vsd.KOsaltonly$Salt, sep="-")
colnames(sampleDistMatrix.KOsaltonly) <- paste(vsd.KOsaltonly$Genotype, vsd.KOsaltonly$Salt, sep="-")
pheatmap(sampleDistMatrix.KOsaltonly,clustering_distance_rows=sampleDists.KOsaltonly,clustering_distance_cols=sampleDists.KOsaltonly,col=colors)
plotPCA(vsd.KOsaltonly, intgroup ="Salt")
#Getting diff expression results
Res_saltinKO=results(DE.KOsaltonly,contrast=c("Salt","low","optimal"))
#Tabulting diff. expressed genes
table_saltinKO <- Res_saltinKO %>%     # Make a result table
  data.frame() %>%
  rownames_to_column(var="Locus") %>%
  as_tibble()
#Sort by p-value
table_saltinKO <- table_saltinKO[order(table_saltinKO$padj),]
# Apply significance threshold, view and export table
table_saltinKO_sig <- table_saltinKO %>%
  filter(padj < 0.05)
write.csv(table_saltinKO_sig, file="KO_salteffect_sigresults.csv")
table_saltinKO_sig
#Volcano plot
KOonly.salteffect.vol.plot <- table_saltinKO %>% 
  mutate(threshold_sig = padj < 0.05)
ggplot(KOonly.salteffect.vol.plot) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) + ggtitle("Effect of low salt on WT cells") +xlab("log2 fold change") + ylab("-log10 adjusted p-value") +xlim(c(-5,5))+ylim(c(0,4))+ theme(legend.position = "none", plot.title = element_text(size = rel(1.5), hjust = 0.5), axis.title = element_text(size = rel(1.25)))
#MA plot
plotMA(Res_saltinKO,colNonSig="grey",colSig="red",colLine="black")
```


```{r twoDplot, warning=FALSE}
twodtable=as.data.frame(matrix(nrow=2621,ncol=6))

table_genotypeinlow <- table_genotypeinlow[order(table_genotypeinlow$Locus),]
table_saltinWT <- table_saltinWT[order(table_saltinWT$Locus),]

colnames(twodtable)=c("Gene","saltpadj","salteffect","KOpadj","KOeffect","indicator")

twodtable$Gene=table_saltinWT$Locus
twodtable$saltpadj=table_saltinWT$padj
twodtable$salteffect=table_saltinWT$log2FoldChange
twodtable$KOpadj=table_genotypeinlow$padj
twodtable$KOeffect=table_genotypeinlow$log2FoldChange
twodtable$indicator[1:2621]="nonsig"
twodtable$indicator[twodtable$KOpadj<0.05]="sigKO"
twodtable$indicator[twodtable$saltpadj<0.05]="sigsalt"
twodtable$indicator[twodtable$KOpadj<0.05&twodtable$saltpadj<0.05]="sig"

ggplot(twodtable,aes(x=salteffect,y=KOeffect,color=indicator))+geom_point()+scale_color_manual(values=c("grey80","red","black","blue"))+theme_bw()+ylim(c(-3.5,2))
```

### Dependency report
```{r}
sessionInfo()
```
